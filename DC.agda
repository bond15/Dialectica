module DC where 
open import Agda.Primitive using (Level; _‚äî_)
open import CatLib using (PreCat;module Finitely; module BinaryProducts; module Cartesian; module Pullback; module ObjectProduct)
open import Cubical.Core.Everything using (_‚â°_)

module _ {o ‚Ñì : Level}(ùíû : PreCat o ‚Ñì)where 
    open PreCat ùíû
    open Finitely ùíû using (FinitelyComplete)
    module foo {fin : FinitelyComplete} where 
        open FinitelyComplete fin using (cartesian; pullback)
        open Cartesian ùíû using (CartesianT)
        open Pullback ùíû using (PullbackT ; IsPullback)
        open PullbackT
        open CartesianT cartesian using (products)
        open BinaryProducts ùíû using(BinaryProductsT)
        open BinaryProductsT products using (_√ó_; product)
        open ObjectProduct ùíû using (module Morphisms; Product)
  
        record Obj : Set (o ‚äî ‚Ñì) where 
            field 
                {A} {U} {X} : Ob    
                Œ± : A ‚áí (U √ó X)
                is-monic : ‚àÄ {C} ‚Üí (g‚ÇÅ g‚ÇÇ : C ‚áí A) ‚Üí Œ± ‚àò g‚ÇÅ ‚â° Œ± ‚àò g‚ÇÇ ‚Üí g‚ÇÅ ‚â° g‚ÇÇ

        open Morphisms
        open Product
        record Hom (A B : Obj) : Set (o ‚äî ‚Ñì) where 
            open Obj A
            open Obj B renaming (A to B; U to V; X to Y; Œ± to Œ≤)
            field
                f : U ‚áí V 
                F : (U √ó Y) ‚áí X
           
            m‚ÇÅ : (U √ó Y) ‚áí (U √ó X)
            m‚ÇÅ = [ product¬†]‚ü® œÄ‚ÇÅ product , F ‚ü©

            m‚ÇÇ : (U √ó Y) ‚áí (V √ó Y)
            m‚ÇÇ = [ product ‚áí product ] f √ó id

            -- Œ±' and Œ≤' should be monic
            open PullbackT (pullback Œ± m‚ÇÅ) renaming (P to apex‚ÇÅ; p‚ÇÇ to Œ±')
            open PullbackT (pullback m‚ÇÇ Œ≤) renaming (P to apex‚ÇÇ; p‚ÇÅ to Œ≤')

            field   
                -- should be unique
                k : apex‚ÇÅ ‚áí apex‚ÇÇ
                k-cond : Œ≤' ‚àò k ‚â° Œ±'

        open Hom
        open import Cubical.Foundations.Isomorphism using (isoToPath; iso ; Iso)
        open import Cubical.Foundations.Prelude using (_‚â°‚ü®_‚ü©_;‚â°‚ü®‚ü©-syntax;_‚àé;cong;cong‚ÇÇ;refl; transport; sym)
        open Iso
        open IsPullback

        module lemmas where 


            ispbsym : {P X Y Z : Ob} ‚Üí (p‚ÇÅ : P ‚áí X) ‚Üí (p‚ÇÇ : P ‚áí Y) ‚Üí (f : X ‚áí Z) ‚Üí (g : Y ‚áí Z) ‚Üí 
                IsPullback p‚ÇÅ p‚ÇÇ f g ‚â° IsPullback p‚ÇÇ p‚ÇÅ g f 
            ispbsym p‚ÇÅ p‚ÇÇ f g = isoToPath prf
                where prf : Iso (IsPullback p‚ÇÅ p‚ÇÇ f g) (IsPullback p‚ÇÇ p‚ÇÅ g f)
                      prf .fun ispb = record
                                        { commute = sym (ispb .commute)
                                        ; universal = Œª x ‚Üí (ispb  .universal) (sym x)
                                        ; unique = Œª x y ‚Üí ispb .unique y x
                                        {- 
                                        {h‚ÇÇ.A : Ob} {h‚ÇÅ : h‚ÇÇ.A ‚áí X} {h‚ÇÇ : h‚ÇÇ.A ‚áí Y} {eq : f ‚àò h‚ÇÅ ‚â° g ‚àò h‚ÇÇ} ‚Üí
                                        p‚ÇÅ ‚àò Pullback.IsPullback.universal ispb eq ‚â° h‚ÇÅ

                                        {h‚ÇÇ.A : Ob} {h‚ÇÅ : h‚ÇÇ.A ‚áí Y} {h‚ÇÇ : h‚ÇÇ.A ‚áí X}{eq : g ‚àò h‚ÇÅ ‚â° f ‚àò h‚ÇÇ} ‚Üí
                                        p‚ÇÇ ‚àò ispb .Pullback.IsPullback.universal (Œª i ‚Üí eq (Cubical.Foundations.Prelude.~ i)) ‚â° h‚ÇÅ
                                        
                                        -}
                                        ; p‚ÇÅ‚àòuniversal‚âàh‚ÇÅ = {! refl!}
                                        ; p‚ÇÇ‚àòuniversal‚âàh‚ÇÇ = {!   !}
                                        }
                      prf .inv ispb = record
                                        { commute = sym (ispb .commute)
                                        ; universal = Œª x ‚Üí (ispb  .universal) (sym x)
                                        ; unique = Œª x y ‚Üí ispb .unique y x
                                        ; p‚ÇÅ‚àòuniversal‚âàh‚ÇÅ = {!   !}
                                        ; p‚ÇÇ‚àòuniversal‚âàh‚ÇÇ = {!   !}
                                        }
                      prf .rightInv = Œª b ‚Üí {!   !}
                      prf .leftInv = Œª b ‚Üí {!   !}

            -- correct notion of equality... probably not
            pbsym : {X Y Z : Ob} ‚Üí (f : X ‚áí Z) ‚Üí (g : Y ‚áí Z) ‚Üí PullbackT f g ‚â° PullbackT g f
            pbsym f g = isoToPath isoprf 
                where isoprf : Iso (PullbackT f g) (PullbackT g f)
                      isoprf .fun pb‚ÇÅ = record { p‚ÇÅ = pb‚ÇÅ .p‚ÇÇ ; p‚ÇÇ = pb‚ÇÅ .p‚ÇÅ ; isPullback = 
                                         record
                                            { commute = sym ((pb‚ÇÅ .isPullback) .commute)
                                            ; universal = Œª x ‚Üí {!   !}
                                            ; unique = {!   !}
                                            ; p‚ÇÅ‚àòuniversal‚âàh‚ÇÅ = {!   !}
                                            ; p‚ÇÇ‚àòuniversal‚âàh‚ÇÇ = {!   !}
                                            } }
                      isoprf .inv pb‚ÇÇ = record { p‚ÇÅ = pb‚ÇÇ .p‚ÇÇ ; p‚ÇÇ = pb‚ÇÇ .p‚ÇÅ ; isPullback = {!   !} }
                      isoprf .rightInv = {!   !}
                      isoprf .leftInv = {!   !}


        DCid : {X : Obj} ‚Üí Hom X X
        DCid .f = id
        DCid .F = œÄ‚ÇÇ product
        DCid .k = {!   !}
        DCid .k-cond = {!   !}

    
        -- now try to make a category out of this...
        DC : PreCat (o ‚äî ‚Ñì) (o ‚äî ‚Ñì) 
        DC .Ob = Obj
        DC ._‚áí_ = Hom 
        DC .Hom-set = {!   !}
        DC .id = {!   !} 
        DC ._‚àò_ = {!   !}
        DC .idr = {!   !}
        DC .idl = {!   !}
        DC .assoc = {!   !}


            
            

        

    
  